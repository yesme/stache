{"name":"{stache}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Yet another \"mustached\" template system","body":"{stache} [DRAFT]\r\n================\r\n\r\n{stache} is yet another mustached template system.  It is named after the fact all {stache} specific expressions are quoted by {}, although it's configrable.\r\n\r\n{stache} is inspired by [{{mustache}}](http://mustache.github.com/), [handlebar](http://handlebarsjs.com/), [dust](http://akdubya.github.com/dustjs/) (and its [LinkedIn port](https://github.com/linkedin/dustjs)), [Django](https://docs.djangoproject.com/en/1.4/topics/templates/), [doT](https://github.com/olado/doT), [Smarty](http://www.smarty.net/), [Juicer](http://juicer.name/docs/docs.html), [Velocity](http://velocity.apache.org/), [Jinja2](http://jinja.pocoo.org/docs/) and [Clearsilver](http://www.clearsilver.net/).\r\n\r\n{stache} consists of two parts: (1) {stache} language spec and (2) target language implementation.\r\n\r\nDesign Principles\r\n-----------------\r\n\r\n- performance, performance, performance: compile template into target language; cache\r\n- cross-language: C++, Java, Python, PHP, Javascript/Node, Javascript/Browser, Actionscript\r\n- keep it simple and stupid: general-purpose; no i18n support; no xss escape\r\n- powerful and pratical: no MVC fundamentalism; logic-enabled to solve common problems in an easy way;\r\n- extendable: user defined functions\r\n- configurable: delimiter\r\n- thread-safety / immutable: compile once, render multiple times in parallel\r\n- unicode supported\r\n\r\nSome implementation details that may be considered:\r\n\r\n- async function definition to enable possible parallel execution\r\n- stream interface for rendering\r\n\r\nTypical Workflows\r\n-----------------\r\n\r\n### In-place render:\r\n\r\n    stache.render(tmpl, context)\r\n\r\n### Compile once at runtime, render many times:\r\n\r\n    tmpl_ = stache.compile(tmpl)\r\n    tmpl_.render(context1)\r\n    tmpl_.render(context2)\r\n\r\n### Compile into file, load later then render:\r\n\r\n    tmpl_ = stache.compile(tmpl)\r\n    tmpl_.store(\"compiled.tmpl\")\r\n\r\n    tmpl_ = stache.load(\"compiled.tmpl\")\r\n    tmpl_.render(context1)\r\n    tmpl_.render(context2)\r\n\r\n"}